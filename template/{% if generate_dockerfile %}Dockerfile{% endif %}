# syntax=docker/dockerfile:1
# Keep this syntax directive! It's used to enable Docker BuildKit
# This dockerfile is adapted from: https://depot.dev/docs/container-builds/how-to-guides/optimal-dockerfiles/python-uv-dockerfile

FROM python:3.12-slim-bookworm AS base

############################
# Set up the builder layer #
############################
FROM base AS builder-base
COPY --from=ghcr.io/astral-sh/uv:{{ uv_version }} /uv /bin/uv

ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy
WORKDIR /app

# By copying in the .env file using the RUN --mount
# we can inject environment variables into the docker build
# stage which can enable us to install private registry
# packages. By doing this in stages the environment
# variables won't persist in the final layer and we
# won't risk leaking secrets
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    --mount=type=secret,id=dotenv,required=false,dst=.env \
    [[ -f .env ]] && export UV_ENV_FILE=.env; \
    uv sync --frozen --no-dev --no-install-project;

COPY . /app

# Install the project
RUN --mount=type=cache,target=/root/.cache/uv \
  uv sync --frozen --no-dev

######################################
# Set up the development environment #
######################################
FROM base AS development
COPY --from=builder /app /app
WORKDIR /app
ENV PATH="/app/.venv/bin:$PATH"

COPY ./scripts ./scripts
COPY ./src ./src
ENV DEBUG=1
ENV ENV="local"

RUN chmod +x scripts/entrypoint.sh

ENTRYPOINT ["scripts/entrypoint.sh"]

######################################
# Set up the development environment #
######################################
FROM base AS production
COPY --from=builder /app /app
WORKDIR /app
ENV PATH="/app/.venv/bin:$PATH"

COPY ./scripts ./scripts
COPY ./src ./src
ENV DEBUG=0
ENV ENV="production"

RUN chmod +x scripts/entrypoint.sh

ENTRYPOINT ["scripts/entrypoint.sh"]
